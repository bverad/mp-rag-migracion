    def projectName="mp-rag-migracion"
    def repodocker="mercadopublico"
    def projectVersion="1.0.0"
    def branch="main"
    def sonarQube="http://192.168.2.166:9000"
    def apache="192.168.2.166"
    def nexus="192.168.2.166:5000"
    def status = 'success'
    def testResults = [:]

    pipeline {
        agent any
        parameters {
            booleanParam(name:'executeTests', defaultValue:true, description:'Ejecutar pruebas unitarias y de cobertura')
        }
        
        environment {
            DOCKER_USERNAME = credentials('user-docker-ait')
            DOCKER_PASSWORD = credentials('pass-docker-ait')
            SONAR_AUTH_TOKEN = credentials('sonarqube-token')
            ADMIN_CONF = credentials('admin.conf')
            TEST_COVERAGE_THRESHOLD = "80"
        }
        
        stages {
            stage('init') {
                steps {
                    script {
                        cleanWs()
                        echo "init ${projectName} pipeline"
                    }
                }
            }
            
            stage('git clone') {
                steps {
                    script {
                        sshagent(['git']) {
                        echo "Git clone ${projectName} github"
                        sh "ls -la ~/.ssh/"
                        sh "git clone https://github.com/bverad/${projectName}.git"
                        sh "cd ${projectName}; git checkout ${branch};git rev-parse --verify HEAD"
                        sh "cd ${projectName}; git checkout ${branch};git pull"
                        sh "cd ${projectName}; ls -la"

                        }
                    }
                }
            }

            
            stage('build') {
                steps {
                    script{
                        echo "building app"
                        //sh "mvn clean install"
                        sh "cd ${projectName}; docker build -t ${projectName} ."
                    }

                }
            }
            
            stage('test'){
                when {
                    expression {
                        params.executeTests
                    }
                }
                steps {
                    script {
                        echo "Ejecutando pruebas unitarias y de cobertura"
                        try {
                            // Preparar entorno
                            sh """
                                cd ${projectName}
                                mkdir -p reports/coverage reports/trivy
                                chmod -R 777 reports
                                cp tests/.env.test .env
                                chmod +x scripts/run_tests.sh
                            """
                            
                            // Ejecutar pruebas dentro del contenedor
                            def testOutput = sh(
                                script: """
                                    cd ${projectName}
                                    docker run --rm -v \$(pwd):/app ${projectName}:latest /app/scripts/run_tests.sh
                                """,
                                returnStatus: true
                            )
                            
                            if (testOutput != 0) {
                                error "Las pruebas fallaron con código de salida: ${testOutput}"
                            }
                            
                            // Verificar cobertura
                            def coverageOutput = sh(
                                script: "cd ${projectName}; if [ -f reports/coverage/coverage.txt ]; then grep 'TOTAL' reports/coverage/coverage.txt | awk '{gsub(/%/,\"\",\$4); print \$4}'; else echo '0'; fi",
                                returnStdout: true
                            ).trim()
                            
                            def coverageValue = coverageOutput.toFloat()
                            if (coverageValue <= 0 || coverageValue > 100) {
                                error "Porcentaje de cobertura inválido: ${coverageValue}%"
                            }
                            
                            testResults.coverage = coverageValue
                            echo "Cobertura detectada: ${testResults.coverage}%"
                            
                            if (testResults.coverage < env.TEST_COVERAGE_THRESHOLD.toInteger()) {
                                error "Cobertura de código (${testResults.coverage}%) por debajo del umbral requerido (${env.TEST_COVERAGE_THRESHOLD}%)"
                            }
                            
                            // Generar reporte HTML
                            sh """cd ${projectName}; echo '<html><head><meta http-equiv="refresh" content="0; url=reports/coverage/html/index.html"></head></html>' > coverage_report.html"""
                            
                            // Archivar reportes
                            archiveArtifacts(
                                artifacts: "${projectName}/reports/**/*,${projectName}/coverage_report.html",
                                fingerprint: true,
                                allowEmptyArchive: false
                            )
                            
                            def coverageUrl = "${env.BUILD_URL}artifact/${projectName}/coverage_report.html"
                            def testReportUrl = "${env.BUILD_URL}artifact/${projectName}/reports/report.html"
                            
                            echo """
                            🧪 Reportes generados:
                            📊 Reporte de pruebas: ${testReportUrl}
                            📈 Reporte de cobertura: ${coverageUrl}
                            """
                            
                            testResults.reportUrls = [
                                tests: testReportUrl,
                                coverage: coverageUrl
                            ]
                            
                        } catch (Exception e) {
                            echo "=== Error durante la ejecución de pruebas ==="
                            echo "Error: ${e.getMessage()}"
                            testResults.failed = true
                            testResults.error = e.getMessage()
                            error "Error en las pruebas: ${e.getMessage()}"
                        } finally {
                            sh "rm -f ${projectName}/.env"
                        }
                    }
                }
            }
            
            stage('sonar analysis') {
                steps {
                    script {
                        echo "scanning code"
                        try {
                            def scannerHome = tool 'SonarQubeScanner'
                            withSonarQubeEnv('SonarQubeAIT') {
                                // Asegurar que el script tiene permisos de ejecución
                                sh "chmod +x ${projectName}/scripts/run_sonar_analysis.sh"
                                
                                // Ejecutar el análisis
                                sh """
                                    cd ${projectName}
                                    
                                    # Variables requeridas por el script
                                    export PROJECT_NAME=${projectName}
                                    export PROJECT_VERSION=${projectVersion}
                                    export SONAR_SCANNER_HOME=${scannerHome}
                                    export SONAR_HOST_URL=${sonarQube}
                                    
                                    # Verificar variables antes de ejecutar
                                    echo "=== Variables de entorno configuradas ==="
                                    echo "PROJECT_NAME: ${projectName}"
                                    echo "PROJECT_VERSION: ${projectVersion}"
                                    echo "SONAR_SCANNER_HOME: ${scannerHome}"
                                    echo "SONAR_HOST_URL: ${sonarQube}"
                                    
                                    # Ejecutar análisis
                                    ./scripts/run_sonar_analysis.sh
                                """
                            }
                            
                            timeout(time: 10, unit: 'MINUTES') {
                                def qg = waitForQualityGate(abortPipeline: false)
                                echo "Quality Gate status: ${qg.status}"
                                testResults.sonarqube = [
                                    status: qg.status,
                                    url: "${sonarQube}/dashboard?id=${projectName}"
                                ]
                                if (qg.status != 'OK') {
                                    echo "Warning: Quality Gate failed with status ${qg.status}, but pipeline will continue"
                                    currentBuild.result = 'UNSTABLE'
                                    status = 'unstable'
                                }
                            }
                        } catch (Exception e) {
                            echo "Warning: Error en el análisis de SonarQube: ${e.getMessage()}"
                            testResults.sonarqube = [
                                status: 'ERROR',
                                url: "${sonarQube}/dashboard?id=${projectName}",
                                error: e.getMessage()
                            ]
                            currentBuild.result = 'UNSTABLE'
                            status = 'unstable'
                        }
                    }
                }
            }
            
            stage('trivy analysis') {
                steps {
                    script {
                        echo "trivy evaluation"
                        try {
                            // Crear directorio para reportes
                            sh """
                                mkdir -p ${projectName}/reports/trivy
                            """
                            
                            // Ejecutar Trivy para generar el reporte JSON (para conteo preciso)
                            sh """
                                cd ${projectName} && \\
                                trivy fs \\
                                --format json \\
                                --ignore-unfixed \\
                                --severity LOW,MEDIUM,HIGH,CRITICAL \\
                                --exit-code 0 \\
                                -o reports/trivy/report.json \\
                                requirements.txt
                            """
                            
                            // Ejecutar Trivy y guardar la salida en formato texto
                            sh """
                                cd ${projectName} && \\
                                trivy fs \\
                                --no-progress \\
                                --ignore-unfixed \\
                                --severity LOW,MEDIUM,HIGH,CRITICAL \\
                                requirements.txt > reports/trivy/report.txt
                            """
                            
                            // Convertir el reporte de texto a HTML con formato
                            sh """
                                cd ${projectName} && \\
                                echo '<pre style="background-color: white; color: black; padding: 10px; font-family: monospace;">' > reports/trivy/report.html && \\
                                cat reports/trivy/report.txt >> reports/trivy/report.html && \\
                                echo '</pre>' >> reports/trivy/report.html
                            """
                            
                            // Contar vulnerabilidades usando jq para procesar el JSON
                            def criticalCount = sh(
                                script: """cd ${projectName} && cat reports/trivy/report.json | jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length'""",
                                returnStdout: true
                            ).trim().toInteger()
                            
                            def highCount = sh(
                                script: """cd ${projectName} && cat reports/trivy/report.json | jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length'""",
                                returnStdout: true
                            ).trim().toInteger()
                            
                            def mediumCount = sh(
                                script: """cd ${projectName} && cat reports/trivy/report.json | jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length'""",
                                returnStdout: true
                            ).trim().toInteger()

                            def lowCount = sh(
                                script: """cd ${projectName} && cat reports/trivy/report.json | jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length'""",
                                returnStdout: true
                            ).trim().toInteger()
                            
                            // Guardar resultados
                            testResults.trivy = [
                                CRITICAL: criticalCount,
                                HIGH: highCount,
                                MEDIUM: mediumCount,
                                LOW: lowCount,
                                reportUrl: "${env.BUILD_URL}artifact/${projectName}/reports/trivy/report.html"
                            ]
                            
                            // Archivar los reportes
                            archiveArtifacts(
                                artifacts: "${projectName}/reports/trivy/**/*",
                                fingerprint: true,
                                allowEmptyArchive: false
                            )
                            
                            echo """
                            🔍 Vulnerabilidades encontradas:
                            - Critical: ${testResults.trivy.CRITICAL}
                            - High: ${testResults.trivy.HIGH}
                            - Medium: ${testResults.trivy.MEDIUM}
                            - Low: ${testResults.trivy.LOW}
                            - Reporte: ${testResults.trivy.reportUrl}
                            """
                            
                        } catch (Exception e) {
                            echo "Error en el análisis de Trivy: ${e.getMessage()}"
                            testResults.trivy = [
                                CRITICAL: 'N/A',
                                HIGH: 'N/A',
                                MEDIUM: 'N/A',
                                LOW: 'N/A',
                                error: e.getMessage()
                            ]
                            throw e
                        }
                    }
                }
            }
            
            stage('docker push') {
                steps {
                    script{
                        echo "docker push nexus-ait"
                        sh """
                        echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin
                        """
                        sh "docker tag ${projectName}:latest mpulgarf/${repodocker}-${projectName}:latest"
                        sh "docker push mpulgarf/${repodocker}-${projectName}:latest"
                    }

                }
            }
            
            stage('kubernetes deploy') {
                steps {
                    script{
                        echo "despliegue imagen kubernetes-ait"
                        sh "rm -f /var/lib/jenkins/.kube/config"
                        sh "cp -f /home/jenkins/config /var/lib/jenkins/.kube/config"			        
                        sh "export KUBECONFIG=~/.kube/config"
                        sh "kubectl apply -f ${projectName}/k8s/deployment.yaml --validate=false"
                        sh "kubectl rollout restart deployment ${projectName}-deployment"
                    }

                }
            }
            
        }
        
        post {
            success {
                echo "Success"
                script {
                    status = "success"
                    echo "final status ${status}"
                }
            }
            
            failure {
                echo "Failure"
                script {
                    status = "failure"
                    echo "final status ${status}"
                }
            }
            
            aborted {
                echo "Aborted"
                script {
                    status = "aborted"
                    echo "final status ${status}"
                }
            }

            unstable {
                echo "Unstable"
                script {
                    status = "unstable"
                    echo "final status ${status}"
                }
            }

            always {
                script {
                    echo "Sending slack notification with status: ${status}"
                    def slackResponse = slackSend(
                        color: "${status.equals('success') ? 'good' : (status.equals('unstable') ? 'warning' : 'danger')}", 
                        blocks: getBlockSlackMessage(projectName, projectVersion, status, testResults, branch)
                    )
                }
            }
        }
        
    }

    def getBlockSlackMessage(projectName, projectVersion, status, testResults, branchName) {
        def blocks = [
            [
                "type": "header",
                "text": [
                    "type": "plain_text",
                    "text": "Construcción de aplicación ${projectName}:${projectVersion} ${status}",
                    "emoji": true
                ]
            ],
            [
                "type": "header",
                "text": [
                    "type": "plain_text",
                    "text": "ℹ️ Información General",
                    "emoji": true
                ]
            ],
            [
                "type": "section",
                "text": [
                    "type": "mrkdwn",
                    "text": "Detalles de la construcción en el siguiente enlace :ghost: *si lo deseas* puedes ver los resultados en Jenkins. <${env.BUILD_URL}|Abrir>"
                ],
                "fields": [
                    [
                        "type": "mrkdwn",
                        "text": "*Nombre del Job*\n${env.JOB_NAME}"
                    ],
                    [
                        "type": "mrkdwn",
                        "text": "*Número de Build*\n${env.BUILD_NUMBER}"
                    ],
                    [
                        "type": "mrkdwn",
                        "text": "*Rama*\n${branchName}"
                    ]
                ]
            ],
            [
                "type": "divider"
            ]
        ]

        // Agregar resultados de pruebas al mensaje de Slack si existen
        if (testResults) {
            blocks.add([
                "type": "header",
                "text": [
                    "type": "plain_text",
                    "text": "🧪 Resultados de Pruebas",
                    "emoji": true
                ]
            ])
            blocks.add([
                "type": "section",
                "text": [
                    "type": "mrkdwn",
                    "text": "${testResults.failed ? '❌ Pruebas fallidas: ' + testResults.error : '✅ Todas las pruebas pasaron'}\n" +
                        "Cobertura: ${testResults.coverage ?: 'N/A'}%\n" +
                        (testResults.reportUrls ? "📊 Reportes:\n" +
                        "• <${testResults.reportUrls.tests}|Reporte de Pruebas>\n" +
                        "• <${testResults.reportUrls.coverage}|Reporte de Cobertura>" : "")
                ]
            ])
            blocks.add([
                "type": "divider"
            ])
        }
        
        // Agregar resultados de SonarQube
        if (testResults?.sonarqube) {
            blocks.add([
                "type": "header",
                "text": [
                    "type": "plain_text",
                    "text": "🔍 Análisis de Calidad de Código",
                    "emoji": true
                ]
            ])
            
            def sonarStatus = testResults.sonarqube.status == 'OK' ? '✅' : '❌'
            def sonarText = "${sonarStatus} Quality Gate: ${testResults.sonarqube.status}\n" +
                        "🔍 <${testResults.sonarqube.url}|Ver Reporte Completo>"
            
            if (testResults.sonarqube.error) {
                sonarText += "\n⚠️ Error: ${testResults.sonarqube.error}"
            }
            
            blocks.add([
                "type": "section",
                "text": [
                    "type": "mrkdwn",
                    "text": sonarText
                ]
            ])
            blocks.add([
                "type": "divider"
            ])
        }
        
        // Agregar resultados de Trivy con formato mejorado
        if (testResults?.trivy) {
            blocks.add([
                "type": "header",
                "text": [
                    "type": "plain_text",
                    "text": "🔒 Análisis de Vulnerabilidades",
                    "emoji": true
                ]
            ])
            
            blocks.add([
                "type": "section",
                "text": [
                    "type": "mrkdwn",
                    "text": "*Resumen de Vulnerabilidades*\n" +
                        "🔴 Críticas: ${testResults.trivy.CRITICAL ?: 0}\n" +
                        "🟠 Altas: ${testResults.trivy.HIGH ?: 0}\n" +
                        "🟡 Medias: ${testResults.trivy.MEDIUM ?: 0}\n" +
                        "🔵 Bajas: ${testResults.trivy.LOW ?: 0}\n" +
                        "🔍 <${testResults.trivy.reportUrl}|Ver Reporte Completo>" +
                        (testResults.trivy.error ? "\n⚠️ Error: ${testResults.trivy.error}" : "")
                ]
            ])
            blocks.add([
                "type": "divider"
            ])
        }

        return blocks
    }
