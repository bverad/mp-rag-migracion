def projectName="mp-rag-migracion"
def repodocker="mercadopublico"
def projectVersion="1.0.0"
def branch="main"
def sonarQube="http://192.168.2.166:9000"
def apache="192.168.2.166"
def nexus="192.168.2.166:5000"
def status
def testResults = [:]

pipeline {
	agent any
	parameters {
		booleanParam(name:'executeTests', defaultValue:true, description:'Ejecutar pruebas unitarias y de cobertura')
	}
	
	environment {
        DOCKER_USERNAME = credentials('user-docker-ait')
        DOCKER_PASSWORD = credentials('pass-docker-ait')
        SONAR_AUTH_TOKEN = credentials('sonarqube-token')
        ADMIN_CONF = credentials('admin.conf')
        TEST_COVERAGE_THRESHOLD = "80"
    }
	
	stages {
		stage('init') {
		    steps {
		        script {
		            cleanWs()
                    echo "init ${projectName} pipeline"
		        }
            }
		}
		
		stage('git clone') {
		    steps {
		        script {
		            sshagent(['git']) {
                    echo "Git clone ${projectName} github"
                    sh "ls -la ~/.ssh/"
                    sh "git clone https://github.com/bverad/${projectName}.git"
                    sh "cd ${projectName}; git checkout ${branch};git rev-parse --verify HEAD"
                    sh "cd ${projectName}; git checkout ${branch};git pull"
                    sh "cd ${projectName}; ls -la"

		            }
		        }
            }
		}

		
		stage('build') {
			steps {
			    script{
			        echo "building app"
                    //sh "mvn clean install"
                    sh "cd ${projectName}; docker build -t ${projectName} ."
			    }

			}
		}
		
		stage('test'){
			when {
				expression {
					params.executeTests
				}
			}
			steps {
				script {
					echo "Ejecutando pruebas unitarias y de cobertura"
					try {
						// Crear directorios para reportes
						sh """
							mkdir -p ${projectName}/reports/coverage
							mkdir -p ${projectName}/reports/trivy
						"""
						
						// Copiar archivo .env.test existente
						sh """
							cp ${projectName}/tests/.env.test ${projectName}/.env
						"""
						
						// Asegurar permisos de ejecución en el script de tests
						sh "chmod +x ${projectName}/scripts/run_tests.sh"
						
						// Ejecutar pruebas dentro del contenedor y generar reportes
						def testOutput = sh(
							script: """
								docker run --rm \
								-v /var/lib/jenkins/workspace/${projectName}/${projectName}:/app \
								${projectName}:latest ./scripts/run_tests.sh
							""",
							returnStdout: true
						).trim()
						
						// Procesar resultados de cobertura
						def coverageOutput = sh(
							script: """
								cat ${projectName}/reports/coverage/coverage.txt | grep "TOTAL" | awk '{print \$4}' | tr -d '%'
							""",
							returnStdout: true
						).trim()
						
						if (coverageOutput?.trim()) {
							testResults.coverage = coverageOutput.trim().toInteger()
							echo "Cobertura detectada: ${testResults.coverage}%"
							
							if (testResults.coverage < env.TEST_COVERAGE_THRESHOLD.toInteger()) {
								error "Cobertura de código (${testResults.coverage}%) por debajo del umbral requerido (${env.TEST_COVERAGE_THRESHOLD}%)"
							}
						} else {
							error "No se pudo obtener el porcentaje de cobertura del reporte"
						}
						
						// Verificar y archivar reportes
						if (!fileExists("${projectName}/reports")) {
							error "El directorio de reportes no existe"
						}
						
						archiveArtifacts(
							artifacts: "${projectName}/reports/**/*",
							fingerprint: true,
							allowEmptyArchive: false
						)
						
						echo """
						🧪 Reportes generados:
						📊 Reporte de pruebas: ${env.BUILD_URL}artifact/${projectName}/reports/report.html
						📈 Reporte de cobertura: ${env.BUILD_URL}artifact/${projectName}/reports/coverage/index.html
						"""
						
						testResults.reportUrls = [
							tests: "${env.BUILD_URL}artifact/${projectName}/reports/report.html",
							coverage: "${env.BUILD_URL}artifact/${projectName}/reports/coverage/index.html"
						]
					} catch (Exception e) {
						testResults.failed = true
						testResults.error = e.getMessage()
						error "Error en las pruebas: ${e.getMessage()}"
					} finally {
						// Limpiar archivo .env temporal
						sh "rm -f ${projectName}/.env"
					}
				}

				echo "scanning code"
				script {      
					try {
						// requires SonarQube Scanner 2.8+
						def scannerHome = tool 'SonarQubeScanner'
						withSonarQubeEnv('SonarQubeAIT') {
							sh """
								cd ${projectName} && \\
								${scannerHome}/bin/sonar-scanner \\
								-Dsonar.projectKey=${projectName} \\
								-Dsonar.projectName=${projectName} \\
								-Dsonar.projectVersion=${projectVersion} \\
								-Dsonar.sources=src \\
								-Dsonar.tests=tests \\
								-Dsonar.host.url=${sonarQube} \\
								-Dsonar.scm.provider=git \\
								-Dsonar.language=python \\
								-Dsonar.python.version=3.11 \\
								-Dsonar.sourceEncoding=UTF-8 \\
								-Dsonar.token=\${SONAR_AUTH_TOKEN} \\
								-Dsonar.qualitygate.wait=true \\
								-Dsonar.ws.timeout=300 \\
								-Dsonar.python.coverage.reportPaths=reports/coverage/coverage.xml \\
								-Dsonar.coverage.exclusions=tests/**,**/__init__.py \\
								-Dsonar.exclusions=**/*.pyc,**/__pycache__/**,tests/** \\
								-Dsonar.python.xunit.reportPath=reports/junit.xml \\
								-Dsonar.python.pylint.reportPath=reports/pylint.txt
							"""
						}
						
						timeout(time: 10, unit: 'MINUTES') {
							def qg = waitForQualityGate(abortPipeline: false)
							echo "Quality Gate status: ${qg.status}"
							testResults.sonarqube = [
								status: qg.status,
								url: "${sonarQube}/dashboard?id=${projectName}"
							]
							if (qg.status != 'OK') {
								error "Quality Gate failed: ${qg.status}"
							}
						}
					} catch (Exception e) {
						echo "Error en el análisis de SonarQube: ${e.getMessage()}"
						testResults.sonarqube = [
							status: 'ERROR',
							url: "${sonarQube}/dashboard?id=${projectName}",
							error: e.getMessage()
						]
					}

					echo "trivy evaluation"
					try {
						// Crear directorio para reportes
						sh """
							mkdir -p ${projectName}/reports/trivy
						"""
						
						// Ejecutar Trivy para generar el reporte JSON (para conteo preciso)
						sh """
							cd ${projectName} && \\
							trivy fs \\
							--format json \\
							--ignore-unfixed \\
							--severity LOW,MEDIUM,HIGH,CRITICAL \\
							--exit-code 0 \\
							-o reports/trivy/report.json \\
							requirements.txt
						"""
						
						// Ejecutar Trivy y guardar la salida en formato texto
						sh """
							cd ${projectName} && \\
							trivy fs \\
							--no-progress \\
							--ignore-unfixed \\
							--severity LOW,MEDIUM,HIGH,CRITICAL \\
							requirements.txt > reports/trivy/report.txt
						"""
						
						// Convertir el reporte de texto a HTML con formato
						sh """
							cd ${projectName} && \\
							echo '<pre style="background-color: white; color: black; padding: 10px; font-family: monospace;">' > reports/trivy/report.html && \\
							cat reports/trivy/report.txt >> reports/trivy/report.html && \\
							echo '</pre>' >> reports/trivy/report.html
						"""
						
						// Contar vulnerabilidades usando jq para procesar el JSON
						def criticalCount = sh(
							script: """cd ${projectName} && cat reports/trivy/report.json | jq '[.Results[].Vulnerabilities[]? | select(.Severity=="CRITICAL")] | length'""",
							returnStdout: true
						).trim().toInteger()
						
						def highCount = sh(
							script: """cd ${projectName} && cat reports/trivy/report.json | jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH")] | length'""",
							returnStdout: true
						).trim().toInteger()
						
						def mediumCount = sh(
							script: """cd ${projectName} && cat reports/trivy/report.json | jq '[.Results[].Vulnerabilities[]? | select(.Severity=="MEDIUM")] | length'""",
							returnStdout: true
						).trim().toInteger()

						def lowCount = sh(
							script: """cd ${projectName} && cat reports/trivy/report.json | jq '[.Results[].Vulnerabilities[]? | select(.Severity=="LOW")] | length'""",
							returnStdout: true
						).trim().toInteger()
						
						// Guardar resultados
						testResults.trivy = [
							CRITICAL: criticalCount,
							HIGH: highCount,
							MEDIUM: mediumCount,
							LOW: lowCount,
							reportUrl: "${env.BUILD_URL}artifact/${projectName}/reports/trivy/report.html"
						]
						
						// Archivar los reportes
						archiveArtifacts(
							artifacts: "${projectName}/reports/trivy/**/*",
							fingerprint: true,
							allowEmptyArchive: false
						)
						
						echo """
						🔍 Vulnerabilidades encontradas:
						- Critical: ${testResults.trivy.CRITICAL}
						- High: ${testResults.trivy.HIGH}
						- Medium: ${testResults.trivy.MEDIUM}
						- Low: ${testResults.trivy.LOW}
						- Reporte: ${testResults.trivy.reportUrl}
						"""
						
					} catch (Exception e) {
						echo "Error en el análisis de Trivy: ${e.getMessage()}"
						testResults.trivy = [
							CRITICAL: 'N/A',
							HIGH: 'N/A',
							MEDIUM: 'N/A',
							LOW: 'N/A',
							error: e.getMessage()
						]
					}
				}
			}
		}
		
        stage('docker push') {
			steps {
			    script{
			        echo "docker push nexus-ait"
			        sh """
                    echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin
                    """
                    sh "docker tag ${projectName}:latest mpulgarf/${repodocker}-${projectName}:latest"
                    sh "docker push mpulgarf/${repodocker}-${projectName}:latest"
			    }

			}
		}
		
		stage('kubernetes deploy') {
			steps {
			    script{
			        echo "despliegue imagen kubernetes-ait"
			        sh "rm -f /var/lib/jenkins/.kube/config"
			        sh "cp -f /home/jenkins/config /var/lib/jenkins/.kube/config"			        
			        sh "export KUBECONFIG=~/.kube/config"
                    sh "kubectl apply -f ${projectName}/k8s/deployment.yaml --validate=false"
                    sh "kubectl rollout restart deployment ${projectName}-deployment"
			    }

			}
		}
		
	}
	
	post {
   		success {
            echo "Success"
            script{
                status = "success"
                echo "final status ${status}"

            }
		}
		
		failure {
		    echo "Failure"
		    script {
		        status = "failure"
		    }
		}
		
		aborted {
		    echo "Aborted"
		    script {
		        status = "aborted"
		    }
		}

        cleanup {
           echo "Sending slack notification"
           script {
                echo "final status ${status}"
                def slackResponse = slackSend(
                    color: "${status.equals('success') ? 'good' : 'danger'}", 
                    blocks: getBlockSlackMessage(projectName, projectVersion, status, testResults, branch)
                )
                
                echo "Cleaning workspace"
                cleanWs()
            }
        }
	}
	
}

def getBlockSlackMessage(projectName, projectVersion, status, testResults, branchName) {
    def blocks = [
        [
            "type": "header",
            "text": [
                "type": "plain_text",
                "text": "Construcción de aplicación ${projectName}:${projectVersion} ${status}",
                "emoji": true
            ]
        ],
        [
            "type": "header",
            "text": [
                "type": "plain_text",
                "text": "ℹ️ Información General",
                "emoji": true
            ]
        ],
        [
            "type": "section",
            "text": [
                "type": "mrkdwn",
                "text": "Detalles de la construcción en el siguiente enlace :ghost: *si lo deseas* puedes ver los resultados en Jenkins. <${env.BUILD_URL}|Abrir>"
            ],
            "fields": [
                [
                    "type": "mrkdwn",
                    "text": "*Nombre del Job*\n${env.JOB_NAME}"
                ],
                [
                    "type": "mrkdwn",
                    "text": "*Número de Build*\n${env.BUILD_NUMBER}"
                ],
                [
                    "type": "mrkdwn",
                    "text": "*Rama*\n${branchName}"
                ]
            ]
        ],
        [
            "type": "divider"
        ]
    ]

    // Agregar resultados de pruebas al mensaje de Slack si existen
    if (testResults) {
        blocks.add([
            "type": "header",
            "text": [
                "type": "plain_text",
                "text": "🧪 Resultados de Pruebas",
                "emoji": true
            ]
        ])
        blocks.add([
            "type": "section",
            "text": [
                "type": "mrkdwn",
                "text": "${testResults.failed ? '❌ Pruebas fallidas: ' + testResults.error : '✅ Todas las pruebas pasaron'}\n" +
                       "Cobertura: ${testResults.coverage ?: 'N/A'}%\n" +
                       (testResults.reportUrls ? "📊 Reportes:\n" +
                       "• <${testResults.reportUrls.tests}|Reporte de Pruebas>\n" +
                       "• <${testResults.reportUrls.coverage}|Reporte de Cobertura>" : "")
            ]
        ])
        blocks.add([
            "type": "divider"
        ])
    }
    
    // Agregar resultados de SonarQube
    if (testResults?.sonarqube) {
        blocks.add([
            "type": "header",
            "text": [
                "type": "plain_text",
                "text": "🔍 Análisis de Calidad de Código",
                "emoji": true
            ]
        ])
        
        def sonarStatus = testResults.sonarqube.status == 'OK' ? '✅' : '❌'
        def sonarText = "${sonarStatus} Quality Gate: ${testResults.sonarqube.status}\n" +
                       "🔍 <${testResults.sonarqube.url}|Ver Reporte Completo>"
        
        if (testResults.sonarqube.error) {
            sonarText += "\n⚠️ Error: ${testResults.sonarqube.error}"
        }
        
        blocks.add([
            "type": "section",
            "text": [
                "type": "mrkdwn",
                "text": sonarText
            ]
        ])
        blocks.add([
            "type": "divider"
        ])
    }
    
    // Agregar resultados de Trivy con formato mejorado
    if (testResults?.trivy) {
        blocks.add([
            "type": "header",
            "text": [
                "type": "plain_text",
                "text": "🔒 Análisis de Vulnerabilidades",
                "emoji": true
            ]
        ])
        
        blocks.add([
            "type": "section",
            "text": [
                "type": "mrkdwn",
                "text": "*Resumen de Vulnerabilidades*\n" +
                       "🔴 Críticas: ${testResults.trivy.CRITICAL ?: 0}\n" +
                       "🟠 Altas: ${testResults.trivy.HIGH ?: 0}\n" +
                       "🟡 Medias: ${testResults.trivy.MEDIUM ?: 0}\n" +
                       "🔵 Bajas: ${testResults.trivy.LOW ?: 0}\n" +
                       "🔍 <${testResults.trivy.reportUrl}|Ver Reporte Completo>" +
                       (testResults.trivy.error ? "\n⚠️ Error: ${testResults.trivy.error}" : "")
            ]
        ])
        blocks.add([
            "type": "divider"
        ])
    }

    return blocks
}
